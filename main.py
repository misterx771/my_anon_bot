
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

BOT_TOKEN = '7990044460:AAFMYiXyWzeGDZoiEK1iIQi6cDA61hFcEPc'
ADMIN_ID = 2077750894

def get_start_keyboard():
    keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data="start_chat")]]
    return InlineKeyboardMarkup(keyboard)

def get_main_keyboard():
    keyboard = [[InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ x771", callback_data="send_anon")]]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.",
        reply_markup=get_start_keyboard()
    )

async def handle_start_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ x771:",
        reply_markup=get_main_keyboard()
    )

async def handle_send_anon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ x771.")
    context.user_data["awaiting_message"] = True

async def receive_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_message"):
        context.user_data["awaiting_message"] = False
        user = update.message.from_user
        username = user.username or f"{user.first_name} {user.last_name or ''}"

        sent = await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì© –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{update.message.text}\n\nüë§ –û—Ç: @{username if user.username else '–±–µ–∑ username'}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
            ])
        )

        context.bot_data[sent.message_id] = user.id
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ x771!")
    else:
        await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def admin_reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.from_user.id != ADMIN_ID:
        return
    target_user_id = int(query.data.split("_")[1])
    context.user_data["reply_to_user"] = target_user_id
    await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

async def admin_send_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id == ADMIN_ID and context.user_data.get("reply_to_user"):
        user_id = context.user_data.pop("reply_to_user")
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç x771:\n\n{update.message.text}"
            )
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    elif update.message.from_user.id == ADMIN_ID:
        await update.message.reply_text("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å' –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏.")

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_start_chat, pattern="^start_chat$"))
    app.add_handler(CallbackQueryHandler(handle_send_anon, pattern="^send_anon$"))
    app.add_handler(CallbackQueryHandler(admin_reply_handler, pattern="^reply_\\d+$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), admin_send_response))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
